generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  passwordHash    String
  name            String
  image           String?
  memberships     Membership[]
  projectMembers  ProjectMember[]
  comments        Comment[]
  tasks           Task[]       @relation("TaskAssignee")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  memberships Membership[]
  projects    Project[]
  createdAt   DateTime @default(now())
}

model Membership {
  id          String   @id @default(cuid())
  role        Role
  userId      String
  workspaceId String
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  @@unique([userId, workspaceId])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

model Project {
  id           String   @id @default(cuid())
  name         String
  key          String   @unique
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  columns      Column[]
  members      ProjectMember[]
  createdAt    DateTime @default(now())
}

model ProjectMember {
  id         String  @id @default(cuid())
  role       ProjectRole
  projectId  String
  userId     String
  project    Project @relation(fields: [projectId], references: [id])
  user       User    @relation(fields: [userId], references: [id])
  @@unique([projectId, userId])
}

enum ProjectRole {
  MANAGER
  CONTRIBUTOR
  VIEWER
}

model Column {
  id        String  @id @default(cuid())
  name      String
  order     Int
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  tasks     Task[]
}

model Task {
  id          String  @id @default(cuid())
  title       String
  description String?
  assigneeId  String?
  assignee    User?   @relation("TaskAssignee", fields: [assigneeId], references: [id])
  columnId    String
  column      Column  @relation(fields: [columnId], references: [id])
  priority    Priority @default(MEDIUM)
  dueDate     DateTime?
  comments    Comment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Comment {
  id        String  @id @default(cuid())
  text      String
  taskId    String
  userId    String
  task      Task @relation(fields: [taskId], references: [id])
  user      User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
